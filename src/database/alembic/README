### Supplies Database Migrations

[Alembic](https://alembic.sqlalchemy.org/en/latest/tutorial.html/) is the tool currently used to run data migrations 
into our postgres supplies database. The first script under `versions` adds the base products, orders and organisation tables. This will 
contain a list of migrations to run in order to get to the current state of the database.

#### :information_source: To add a new migration script:
Within the `src/database` directory, and after making your local change to the `src/models` files, run

```
poetry run alembic revision --autogenerate -m "Reasonable explanation for the migration to be run"
```
To ensure your local db is up-to-date with the latest migrations then run

`poetry run alembic upgrade head`

If you want to try out the effect of running a migration up and then down you can use

```
poetry run alembic upgrade +1
```
and then to downgrade
```
poetry run alembic downgrade -1
```

This is quite useful when creating a migration to be able to test out it's effect. Note the example
shows running a single migration up and down but you can swap out that number for however many you
need to run.

Or to test a specific revision
```
poetry run alembic upgrade 50ca0b336fb5
```
and
```
poetry run alembic downgrade 50ca0b336fb5
```

#### Alembic config:
When running `alembic init` for the first time, autogenerated files include:
* `alembic.ini` at root folder: This is a file that the alembic script looks for when invoked
and contains any necessary configurations, also can be manually updated.
* `env.py` under `src/database/alembic` directory: the python script for actually triggering the migrations, using env variables specified
* `script.py.mako`: This is a `Mako` template file which is used to generate new migration scripts
All configuration required for alembic to run smoothly is under `alembic.ini` and `src/database/alembic`.

#### :information_source: Initial Migration/Setup 
You do not need to worry about initial migrations as they are performed in CI, already exist in production and aren't needed in local testing as we create the database using a different approach.
